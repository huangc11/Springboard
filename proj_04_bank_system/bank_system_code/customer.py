from sqlalchemy import Column,  INTEGER, VARCHAR, or_
from sqlalchemy.ext.declarative import declarative_base
from  database import Database
from utility import Utility as ut

from sqlalchemy.orm.exc import NoResultFound, MultipleResultsFound
Base = declarative_base()

class Customer(Base):

    """
    A class to represent a customer.

    Attributes
    ----------
    id:         customer id.  Generated by system at creation.
    name (str):          name of the customer
    address (str):       name of the customer
    customer_no (str):  customer_no of the customer.

    """

    __tablename__ = 'customer'

    id = Column(INTEGER, primary_key=True)
    name = Column(VARCHAR(60), nullable=False)
    address = Column(VARCHAR(100))


    def __init__(self, name, address=''):
        self.name, self.address = name, address

    def __repr__(self):
      return ("Customer({id}, '{name}', '{address}')".format(id=self.id, name=self.name, address=self.address))


    def insert_to_db(self):
        """insert a new account record into database.
          Returns:
                  object of account if succeed
                  None, if failure
        """
        new_customer = Database.new_rec_in_db(self)

        return new_customer

    @staticmethod
    def not_exist_by_name_addr(p_name, p_addr=None):
        """search  customer in database by name and address. Return record if found or None if failed
          Args:
            p_name (str): customer name
            p_addr (str): customer address

        Returns:
            result(boolean)
        """

        try:
            session = Database.get_session()
            rec = session.query(Customer).filter(Customer.name == p_name).filter(or_(Customer.address == p_addr,
                           p_addr == None)).one()
            return False
        except MultipleResultsFound:
            return False
        except NoResultFound:
            return True
        except Exception as e:
            print(e)
            ut.log_exeption(e)
            return False


    @staticmethod
    def get_by_id(p_id):
        """Get the custome record from database by customer id. Returns  customer object (if found) or None (not found)
        """
        ut.log_info(p_id)
        try:
            session = Database.get_session()
            rec = session.query(Customer).filter(Customer.id == p_id).one()
            return rec
        except Exception as e:
            ut.log_exeption(e)
            return None




if __name__ == '__main__':
    Database.initialise()
    res = Customer.not_exist_by_name_addr('maria','kir2kland')
    print(res)

    res =Customer.get_by_id(169)
    print(res)



